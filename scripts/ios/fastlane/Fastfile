# Fastfile for Newomen iOS App Deployment
# Usage: fastlane [lane] [options]

default_platform(:ios)

platform :ios do
  # App Information
  APP_NAME = "Newomen"
  BUNDLE_ID = "me.newomen.app"
  TEAM_ID = "48P296BWWP"
  SCHEME = "App"

  before_all do
    setup_circle_ci if ENV['CI']
  end

  desc "Run tests"
  lane :test do
    run_tests(
      scheme: SCHEME,
      device: "iPhone 14",
      clean: true
    )
  end

  desc "Build for development"
  lane :build_dev do
    build_app(
      scheme: SCHEME,
      configuration: "Debug",
      destination: "generic/platform=iOS",
      export_options: {
        method: "development",
        teamID: TEAM_ID
      }
    )
  end

  desc "Build for AdHoc distribution"
  lane :build_adhoc do
    ensure_git_status_clean

    # Increment build number
    increment_build_number(
      build_number: latest_testflight_build_number + 1
    )

    # Build the app
    build_app(
      scheme: SCHEME,
      configuration: "Release",
      destination: "generic/platform=iOS",
      export_options: {
        method: "ad-hoc",
        teamID: TEAM_ID,
        provisioningProfiles: {
          BUNDLE_ID => "match AdHoc #{BUNDLE_ID}"
        }
      }
    )

    # Upload to Diawi for distribution
    upload_to_diawi(
      api_token: ENV['DIAWI_TOKEN'],
      find_by: "build_number"
    )
  end

  desc "Build and upload to TestFlight"
  lane :beta do
    ensure_git_status_clean

    # Run tests first
    test

    # Increment build number
    increment_build_number(
      build_number: latest_testflight_build_number + 1
    )

    # Build the app
    build_app(
      scheme: SCHEME,
      configuration: "Release",
      destination: "generic/platform=iOS",
      export_options: {
        method: "app-store",
        teamID: TEAM_ID,
        provisioningProfiles: {
          BUNDLE_ID => "match AppStore #{BUNDLE_ID}"
        }
      }
    )

    # Upload to TestFlight
    upload_to_testflight(
      skip_submission: true,
      skip_waiting_for_build_processing: true
    )

    # Notify team
    slack(
      message: "🚀 New #{APP_NAME} beta build is available on TestFlight! 🎉",
      channel: "#mobile-releases",
      payload: {
        "Build Number" => get_build_number,
        "Version" => get_version_number,
        "Uploaded by" => ENV['USER'] || 'Automated Build'
      }
    )
  end

  desc "Build and submit to App Store"
  lane :release do
    ensure_git_status_clean

    # Ensure we're on main branch
    ensure_git_branch(branch: "main")

    # Run tests
    test

    # Increment version number if needed
    version_number = prompt(text: "Enter new version number (current: #{get_version_number}):")
    if version_number && version_number != get_version_number
      increment_version_number(version_number: version_number)
    end

    # Increment build number
    increment_build_number(
      build_number: latest_app_store_build_number + 1
    )

    # Build the app
    build_app(
      scheme: SCHEME,
      configuration: "Release",
      destination: "generic/platform=iOS",
      export_options: {
        method: "app-store",
        teamID: TEAM_ID,
        provisioningProfiles: {
          BUNDLE_ID => "match AppStore #{BUNDLE_ID}"
        }
      }
    )

    # Submit to App Store
    deliver(
      submit_for_review: true,
      automatic_release: false,
      skip_metadata: false,
      skip_screenshots: true,
      precheck_include_in_app_purchases: false,
      force: true,
      metadata_path: "./fastlane/metadata"
    )

    # Create git tag
    add_git_tag(
      tag: "v#{get_version_number}-#{get_build_number}"
    )

    # Push git tag
    push_git_tags

    # Notify team
    slack(
      message: "🎉 #{APP_NAME} v#{get_version_number} submitted to App Store! 🏆",
      channel: "#releases",
      payload: {
        "Version" => get_version_number,
        "Build Number" => get_build_number,
        "Submitted by" => ENV['USER'] || 'Automated Build'
      }
    )
  end

  desc "Update certificates and provisioning profiles"
  lane :update_certificates do
    match(
      type: "development",
      readonly: false
    )

    match(
      type: "adhoc",
      readonly: false
    )

    match(
      type: "appstore",
      readonly: false
    )
  end

  desc "Download certificates and provisioning profiles"
  lane :download_certificates do
    match(
      type: "development",
      readonly: true
    )

    match(
      type: "adhoc",
      readonly: true
    )

    match(
      type: "appstore",
      readonly: true
    )
  end

  desc "Sync certificates"
  lane :sync_certificates do
    sync_code_signing(
      type: "appstore",
      team_id: TEAM_ID,
      app_identifier: BUNDLE_ID
    )
  end

  desc "Update app metadata"
  lane :update_metadata do
    deliver(
      metadata_path: "./fastlane/metadata",
      skip_screenshots: true,
      skip_binary_upload: true,
      force: true
    )
  end

  desc "Upload screenshots"
  lane :upload_screenshots do
    deliver(
      metadata_path: "./fastlane/metadata",
      skip_binary_upload: true,
      skip_metadata: true,
      force: true,
      screenshots_path: "./fastlane/screenshots"
    )
  end

  desc "Run UI tests"
  lane :ui_tests do
    run_tests(
      scheme: "AppUITests",
      device: "iPhone 14",
      clean: true
    )
  end

  desc "Performance tests"
  lane :performance_tests do
    run_tests(
      scheme: "AppPerformanceTests",
      device: "iPhone 14",
      clean: true
    )
  end

  # Error handling
  error do |lane, exception, options|
    slack(
      message: "❌ Lane #{lane} failed with error: #{exception}",
      channel: "#build-failures",
      success: false,
      payload: {
        "Lane" => lane,
        "Error" => exception.message,
        "Options" => options
      }
    )
  end
end