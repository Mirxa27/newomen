name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop, staging]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

env:
  NODE_VERSION: '18'
  BUN_VERSION: '1.0.0'
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          bun install

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run dependency vulnerability scan
        run: |
          npx audit-ci --config audit-ci.json
          npx snyk test --severity-threshold=high

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Run code formatting check
        run: npm run format:check

      - name: Run complexity analysis
        run: npx complexity-report src/ --format json

      - name: Run duplicate code detection
        run: npx jscpd --min-lines 5 --min-tokens 50 src/

      - name: Run security linting
        run: npx eslint-plugin-security .eslintrc.js

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit -- --coverage --ci

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Check coverage threshold
        run: npx nyc check-coverage --lines 80 --functions 80 --branches 80

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:setup:test
          npm run db:migrate:test

      - name: Run integration tests
        run: npm run test:integration -- --ci
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/integration/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test:performance

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/

      - name: Check performance regression
        run: npx perf-guard --threshold 10

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security tests
        run: npm run test:security

      - name: Run OWASP dependency check
        run: npx owasp-dependency-check --project "NewMe" --scan .

      - name: Run security headers check
        run: npx security-headers-check https://staging.newme.app

      - name: Run SSL/TLS scan
        run: npx ssl-scan staging.newme.app

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run accessibility tests
        run: npm run test:accessibility

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun --config=lighthouserc.js

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-results
          path: accessibility-results/

  # Build and Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests, accessibility-tests]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.newme.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for staging
        run: npm run build:staging
        env:
          VITE_API_URL: https://api-staging.newme.app
          VITE_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}

      - name: Deploy to Vercel (Staging)
        run: |
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --env=staging
          npx vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Supabase (Staging)
        run: |
          npx supabase db push --project-ref ${{ secrets.STAGING_SUPABASE_PROJECT_ID }}
          npx supabase functions deploy --project-ref ${{ secrets.STAGING_SUPABASE_PROJECT_ID }}

      - name: Run smoke tests
        run: npm run test:smoke -- --env=staging

      - name: Notify deployment
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            --data '{"text":"ðŸš€ NewMe staging deployment successful!"}'

  # Build and Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests, accessibility-tests]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://newme.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build:production
        env:
          VITE_API_URL: https://api.newme.app
          VITE_SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }}

      - name: Deploy to Vercel (Production)
        run: |
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --env=production
          npx vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Supabase (Production)
        run: |
          npx supabase db push --project-ref ${{ secrets.PRODUCTION_SUPABASE_PROJECT_ID }}
          npx supabase functions deploy --project-ref ${{ secrets.PRODUCTION_SUPABASE_PROJECT_ID }}

      - name: Run health checks
        run: npm run health-check -- --env=production

      - name: Notify deployment
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            --data '{"text":"ðŸŽ‰ NewMe production deployment successful!"}'

      - name: Create release
        run: |
          npx semantic-release

  # Post-deployment Monitoring
  post-deployment-monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run health checks
        run: npm run health-check -- --env=${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

      - name: Check error rates
        run: npm run monitor:error-rates

      - name: Check performance metrics
        run: npm run monitor:performance

      - name: Generate monitoring report
        run: npm run monitor:report

      - name: Upload monitoring results
        uses: actions/upload-artifact@v3
        with:
          name: monitoring-results
          path: monitoring-results/

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [post-deployment-monitoring]
    if: always()
    steps:
      - name: Cleanup test artifacts
        run: |
          rm -rf coverage/
          rm -rf test-results/
          rm -rf performance-results/
          rm -rf accessibility-results/
          rm -rf monitoring-results/

      - name: Cleanup Docker images
        run: |
          docker system prune -f
          docker volume prune -f

      - name: Notify completion
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            --data '{"text":"âœ… NewMe CI/CD pipeline completed!"}'

# Workflow-level configurations
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Environment protection rules
environment:
  staging:
    protection_rules:
      - required_reviewers: 1
      - deployment_protection: true
  production:
    protection_rules:
      - required_reviewers: 2
      - deployment_protection: true
      - environment_approvals: true

# Secrets and variables management
secrets:
  inherit: true

# Artifact retention
retention-days: 30

# Timeout configurations
timeout-minutes: 45

# Permissions
permissions:
  contents: read
  pull-requests: write
  issues: write
  deployments: write
  actions: read